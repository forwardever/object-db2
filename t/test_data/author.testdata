package ObjectDB::TestData::Author;

use strict;
use warnings;

use lib 't/lib';

use Test::More;

use Author;
use MainCategory;

### Related classes are loaded automatically
#use Article;
#use Comment;
#use SubComment;


###### Using columns for mapping that do not follow naming conventions
###### Using columns for mapping that are not primary key columns
###### Map tables using multiple columns

sub load {
    my $class = shift;
    my $conn  = shift;

    
    # Create data
    my $author = Author->create(
        conn     => $conn,
        name     => 'foo',
        articles => [
            {   title    => 'article title1',
                comments => [
                    {   content => 'comment content first',
                        sub_comments => [
                            { content => 'sub comment 1' },
                            { content => 'sub comment 2' }
                        ]
                    },
                    {content => 'comment content second'}
                ]
            },
            {   title    => 'article title2'},
            {   title    => 'article title3',
                comments => [{content => 'comment content3'}]
            },
            {   title    => 'article title4',
                to_do_articles => [{to_do => 'to do 4'}]
            }
        ]
    );
    
    
    
    my $category_1 = MainCategory->create(conn=>$conn, title => 'main category 1');
    my $category_2 = MainCategory->create(conn=>$conn, title => 'main category 2');
    my $category_3 = MainCategory->create(conn=>$conn, title => 'main category 3');
    my $category_4 = MainCategory->create(
        conn            => $conn,
        title           => 'main category 4',
        admin_histories => [
            {   admin_name => 'Andre1',
                from       => '2010-01-01',
                till       => '2010-02-01'
            },
            {   admin_name => 'Andre2',
                from       => '2010-02-01',
                till       => '2010-03-01'
            }

        ]
    );

    $author->articles->[0]->column( 'main_category_id' => $category_4->column('id') )->update;

    
    # 3rd article -> belongs to special report 1 -> belongs to main category 4
    my $special_report_1 = SpecialReport->create(conn=>$conn, title => 'special report 1');
    $author->articles->[2]->column( 'special_report_id' => $special_report_1->column('id') )->update;
    $special_report_1->column( main_category_id => $category_4->column('id') )->update;

    return $author;

}

sub delete {
    my $class = shift;
    my $conn  = shift;

    Author->delete(conn => $conn);
    MainCategory->delete(conn => $conn);

}



1;
